//Start with and array of 5 dice values - randomly generated numbers 1 - 6 ^
//Display the dice values to the user. ^
//Allow the user to determine which values to keep and which to re-roll. ^
//Re-roll only the dice the user has selected^
//Display the Dice values
//Allow the user to select keep/roll again
//Display final dice value
//Print all possible scores, print the highest score possible
//You must use parallel arrays as stated in the introduction.

//You must include the following functions (use as many other functions as you want)
//printHand- returns void, takes an array of dice values and prints them in a clear way
//roll- returns randomly generated int  from 1 to 6
//reroll - takes both the dice values array and the keep/reroll array as pararmters. Reroll only the values specified in the keep/reroll array.
//sum - takes an array as a parameter adds all the int values in the array, return the sum
//calculateScores - takes the dice value array as a parameter, prints all the possible scores, and returns the highest score
//You should have a function for each of the possible score categories.

//Some of the score functions can be generalized. For example, the single number categories (1s, 2s, 3s, 4s...) can be generalized. It is not necessary to write a function to sum1s, sum2s, sum3s, etc. Instead,you can write a single function like sumNum that takes the array and an integer as parameters.

//While neither are required, it is helpful in scoring to have the following functions:

 //a function that creates a frequency array of the dice values (3 dice with a value of  6, 1 die with a value of 2 and 1 dies with a. value of 4. This is useful in determining things like full house and four or 5 of a kind.
//a function that sorts an array from smallest to greatest. this is useful to determine straight
//Ones: Get as many ones as possible.
//Twos: Get as many twos as possible.
//Threes: Get as many threes as possible.
//Fours: Get as many fours as possible.
//Fives: Get as many fives as possible.
//Sixes: Get as many sixes as possible.



//Chance: You can put anything into chance, it's basically like a garbage can when you don't have anything else you can use the dice for. The score is simply the sum of the dice.
//YAHTZEE: Five of a kind. Scores 50 points. You can optionally get multiple Yahtzees, see below for details.
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>


enum
{ NUM_ELEMENTS = 5 };



int diceArray[NUM_ELEMENTS];



int keepArray[NUM_ELEMENTS];


int i = 0;

void
Roll ()
{
  for (i = 0; i < NUM_ELEMENTS; i++)


    {



      diceArray[i] = (rand () % 6) + 1;



      printf ("%d ", diceArray[i]);

    }

}

void
Reroll (void)
{


  for (i = 0; i < NUM_ELEMENTS; i++)

    {

      scanf ("%d", &keepArray[i]);
      if (keepArray[i] == 1)
	{
	  keepArray[i] = diceArray[i];
	}
      if (keepArray[i] == 0)
	{
	  keepArray[i] = (rand () % 6) + 1;
	}
    }
  for (i = 0; i < NUM_ELEMENTS; i++)
    {
      diceArray[i] = keepArray[i];

      printf ("%d ", diceArray[i]);

    }
}

int i;
int
diceSum (int diceArray[NUM_ELEMENTS])
{
  int sum = 0;

  for (int i = 0; i < NUM_ELEMENTS; i++)
    {
      sum = sum + diceArray[i];
    }
  printf ("%d", sum);
  return sum;
}


//Small straight: Get four sequential dice, 1,2,3,4 or 2,3,4,5 or 3,4,5,6. Scores 30 points.
//Large straight: Get five sequential dice, 1,2,3,4,5 or 2,3,4,5,6. Scores 40 points.

int diceArray[NUM_ELEMENTS];
int inner, outer, temp, x;
void
sort (void)
{
  for (outer = 0; outer < NUM_ELEMENTS - 1; outer++)
    {
      for (inner = outer + 1; inner < NUM_ELEMENTS; inner++)
	{
	  if (diceArray[outer] > diceArray[inner])
	    {
	      temp = diceArray[outer];
	      diceArray[outer] = diceArray[inner];
	      diceArray[inner] = temp;
	    }
	}
    }
  for (x = 0; x < NUM_ELEMENTS; x++)
    //printf ("%d ", diceArray[x]);

    if (((diceArray[0] == 1) &&
	 (diceArray[1] == 2) &&
	 (diceArray[2] == 3) &&
	 (diceArray[3] == 4) &&
	 (diceArray[4] == 5)) ||
	((diceArray[0] == 2) &&
	 (diceArray[1] == 3) &&
	 (diceArray[2] == 4) && (diceArray[3] == 5) && (diceArray[4] == 6)))
      {
	printf ("Large Straight: 40");
      }
  if (((diceArray[0] == 1) && (diceArray[1] == 2) && (diceArray[2] == 3)
       && (diceArray[3] == 4)) || ((diceArray[0] == 2) && (diceArray[1] == 3)
				   && (diceArray[2] == 4)
				   && (diceArray[3] == 5))
      || ((diceArray[0] == 3) && (diceArray[1] == 4) && (diceArray[2] == 5)
	  && (diceArray[3] == 6)) || ((diceArray[1] == 1)
				      && (diceArray[2] == 2)
				      && (diceArray[3] == 3)
				      && (diceArray[4] == 4))
      || ((diceArray[1] == 2) && (diceArray[2] == 3) && (diceArray[3] == 4)
	  && (diceArray[4] == 5)) || ((diceArray[1] == 3)
				      && (diceArray[2] == 4)
				      && (diceArray[3] == 5)
				      && (diceArray[4] == 6)))
    {
      printf ("Small Straight: 30");

    }
  //return(0);
}


int diceArray[NUM_ELEMENTS], freq[NUM_ELEMENTS];
int i;
int j;
int count;
void
diceFreq (void)
{
  if ((diceArray[0] != 1) &&
      (diceArray[1] != 1) &&
      (diceArray[2] != 1) && (diceArray[3] != 1) && (diceArray[4] != 1))
    {
      printf ("1's:0\n");
    }
  if ((diceArray[0] != 2) &&
      (diceArray[1] != 2) &&
      (diceArray[2] != 2) && (diceArray[3] != 2) && (diceArray[4] != 2))
    {
      printf ("2's:0\n");
    }
  if ((diceArray[0] != 3) &&
      (diceArray[1] != 3) &&
      (diceArray[2] != 3) && (diceArray[3] != 3) && (diceArray[4] != 3))
    {
      printf ("3's:0\n");
    }
  if ((diceArray[0] != 4) &&
      (diceArray[1] != 4) &&
      (diceArray[2] != 4) && (diceArray[3] != 4) && (diceArray[4] != 4))
    {
      printf ("4's:0\n");
    }
  if ((diceArray[0] != 5) &&
      (diceArray[1] != 5) &&
      (diceArray[2] != 5) && (diceArray[3] != 5) && (diceArray[4] != 5))
    {
      printf ("5's:0\n");
    }
  if ((diceArray[0] != 6) &&
      (diceArray[1] != 6) &&
      (diceArray[2] != 6) && (diceArray[3] != 6) && (diceArray[4] != 6))
    {
      printf ("6's:0\n");
    }
  for (i = 0; i < NUM_ELEMENTS; i++)
    {

      freq[i] = -1;

    }


  for (i = 0; i < NUM_ELEMENTS; i++)
    {
      count = 1;
      for (j = i + 1; j < NUM_ELEMENTS; j++)
	{

	  if (diceArray[i] == diceArray[j])
	    {
	      count++;

	      freq[j] = 0;
	    }
	}


      if (freq[i] != 0)
	{
	  freq[i] = count;
	}
    }

  for (i = 0; i < NUM_ELEMENTS; i++)
    {
      //if (freq[i] != 0)
      {
	// printf ("\n");
	// printf ("%d occurs %d times\n", diceArray[i], freq[i]);
      }


      if (freq[i] == 1)
	{
	  printf ("%d's: %d\n", diceArray[i], (diceArray[i] * 1));
	}
      if (freq[i] == 2)
	{
	  printf ("%d's: %d\n", diceArray[i], (diceArray[i] * 2));

	}
      if (freq[i] == 3)
	{
	  printf ("%d's: %d\n", diceArray[i], (diceArray[i] * 3));
	  printf ("Three of a kind: ");
	  diceSum (diceArray);
	}
      if (freq[i] == 4)
	{
	  printf ("%d's: %d\n", diceArray[i], (diceArray[i] * 4));
	  printf ("Four of a kind: ");
	  diceSum (diceArray);
	}
      if (freq[i] == 5)
	{
	  printf ("%d's: %d\n", diceArray[i], (diceArray[i] * 5));
	  printf ("Yahtzee:50");
	}
      if (freq[i] == 3 && freq[i] == 2)
	{
	  printf ("Full house: 25");
	  //else printf("Full house: 0");
	}

    }
  //Three of a kind: Get three dice with the same number. Points are the sum all dice (not just the three of a kind).
//Four of a kind: Get four dice with the same number. Points are the sum all dice (not just the four of a kind).
//Full house: Get three of a kind and a pair, e.g. 1,1,3,3,3 or 3,3,3,6,6. Scores 25 points.
}


int
main (void)
{

  printf ("Your hand\n");
  Roll ();
  printf ("\n");
  printf
    ("For each value, place a 1 to keep that value, place a 0 to reroll\n");

  Reroll ();
  printf ("\n");
  printf
    ("For each value, place a 1 to keep that value, place a 0 to reroll\n");
  Reroll ();
  printf ("\n");
  sort ();
  printf ("\n");

  printf ("\n");
  diceFreq ();
  printf ("Chance: ");

  diceSum (diceArray);



}
